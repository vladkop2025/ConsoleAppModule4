using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp
{
    internal class Program
    {
        static void Main(string[] args)
        { //Модуль 4. Основы C# и CLR. Основные конструкции C#
            /* 4.4. Кортежи
            Кортежи являются одним из наиболее новых и удобных способов для работы с разными значениями (и одинаковыми тоже).
            В отличие от массивов, в которых нужно держать только однотипные данные, кортеж даёт некоторую свободу. Но что такое 
            вообще кортеж?
            Кортеж не является массивом, хотя некоторые особенности синтаксиса у них похожи.
            Основной удобной особенностью кортежа является обращение к его элементам по именам: мы можем задать собственные 
            варианты и обращаться к ним как к свойствам. Посмотрим на пример:

                        var anketa = (name: "Jane", age: 27);

                        Console.WriteLine("Ваше имя: {0}", anketa.name);
                        Console.WriteLine("Ваш возраст: {0}", anketa.age);

            Можно обращаться к его элементам через свойство .Item и указывать порядковый номер
        
                        Console.WriteLine("Ваше имя: {0}", anketa.Item1);
                        Console.WriteLine("Ваш возраст: {0}", anketa.Item2);

            Итак, давайте создадим кортеж с информацией о пользователе:

                        (string name, int age) anketa;

                        Console.Write("Введите имя: ");
                        anketa.name = Console.ReadLine();
                        Console.Write("Введите возраст с цифрами: ");
                        anketa.age = Convert.ToInt32(Console.ReadLine());

                        Console.WriteLine("Ваше имя: {0}", anketa.name);
                        Console.WriteLine("Ваш возраст: {0}", anketa.age);

                        Console.ReadKey();

            Также нам не обязательно в принципе задавать какое-либо имя кортежу, мы можем просто задать его переменные и всё.
            Но это может быть использовано только в случае, когда мы изначально вводим какие-либо значения.

                        var (name, age) = ("Евгения", 27);
                        Console.WriteLine("Ваше имя: {0}", name);
                        Console.WriteLine("Ваш возраст: {0}", age);

            Используя такую запись кортежа, измените предыдущую программу. Сначала отобразите на экран имя и возраст. 
            После этого попросите пользователя ввести эту же информацию с клавиатуры.

                        var (name, age) = ("Евгения", 27);

		                Console.WriteLine("Моё имя: {0}", name);
		                Console.WriteLine("Мой возраст: {0}", age);

		                Console.Write("Введите имя: ");
		                name = Console.ReadLine();
		                Console.Write("Введите возраст с цифрами:");
		                age = Convert.ToInt32(Console.ReadLine());

		                Console.WriteLine("Ваше имя: {0}", name);
		                Console.WriteLine("Ваш возраст: {0}", age);

            Зачем же нам могут потребоваться кортежи? На самом деле, они являются вариантом так называемого синтаксического 
            сахара: их функциональности можно добиться иными средствами, но их использование банально удобнее.

            Чаще всего в реальных задачах кортежи служат для того, чтобы не создавать большое количество переменных или не 
            описывать дополнительно какой-либо объект с разными типами данных.
            Например, если при работе с интерфейсом ранее нам нужно было создать отдельный тип данных, который принимает 
            вводимые пользователем значения, а потом передавать его в блок логики, то сейчас можно обойтись только кортежем, 
            это несколько сокращает время. В простых же задачах тип данных теперь в принципе можно не создавать, кортеж 
            позволяет экономить время программиста.

            Задайте кортеж Pet с данными о вашем домашнем животном (требуется ввод полей с клавиатуры, нет исходных значений): 
            имя Name, описание Type (кошка, собака, хомяк и т.п.), возраст Age (1, 5 года, 3 года и т.п.). В конце укажите точку с запятой.

                        (string Name, string Type, double Age) Pet;

            Дан следующий кортеж:

                        (string Name, string Type, double Age, int NameCount) Pet;

            Name — имя питомца;
            Type — тип питомца: собака, рыбка, хомячок;
            Age — возраст питомца;
            NameCount — длина имени питомца.

            Заполните данный кортеж значениями аналогично примерам, разобранным в модуле выше.

                    (string Name, string Type, double Age, int NameCount) Pet;

		            Console.WriteLine("Введите имя питомца");
		            Pet.Name = Console.ReadLine();
		            Pet.NameCount = Pet.Name.Length;

		            Console.WriteLine("Введите вид питомца");
		            Pet.Type = Console.ReadLine();

		            Console.WriteLine("Введите возрас питомца");
		            Pet.Age = double.Parse(Console.ReadLine());
            */
        }
    }
}
